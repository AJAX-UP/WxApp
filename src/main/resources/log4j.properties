### 设置日志级别 ###    
log4j.rootLogger = INFO, console, debugFile, errorFile  
    
### 输出到控制台 ###    
log4j.appender.console = org.apache.log4j.ConsoleAppender  
##这个不指定默认是System.out,指定输出控制台  
log4j.appender.console.Target = System.out  
##输出日志级别
log4j.appender.console.Threshold = INFO  
##布局模式，自己灵活指定  
log4j.appender.console.layout = org.apache.log4j.PatternLayout  
log4j.appender.console.layout.ConversionPattern = [framework][%d{ABSOLUTE}-%l][%p]:%m %n  
  
### 保存日志内容到具体文件 ###  
##输出到每天一个独立文件   
log4j.appender.debugFile = org.apache.log4j.DailyRollingFileAppender  
##输出日志级别  
log4j.appender.debugFile.Threshold = INFO  
##异常日志文件路径,文件名称方案
#log4j.appender.debugFile.File = D:/logs/log.log  
#log4j.appender.debugFile.DatePattern = '.'yyyy-MM-dd-HH  
##设定信息是增加而不是覆盖  
log4j.appender.debugFile.Append=true  
#信息输出格式  
log4j.appender.debugFile.layout = org.apache.log4j.PatternLayout  
log4j.appender.debugFile.layout.ConversionPattern = [framework][%d{ABSOLUTE}-%l][%p]:%m %n  
  
### 保存异常信息到具体文件 ###    
##输出到每天一个独立文件    
log4j.appender.errorFile = org.apache.log4j.DailyRollingFileAppender  
##只输出ERROR级别以上的日志内容 
log4j.appender.errorFile.Threshold = ERROR  
##异常日志文件路径,文件名称方案
#log4j.appender.errorFile.File = D:/logs/error.log  
#log4j.appender.errorFile.DatePattern = '.'yyyy-MM-dd-HH  
##设定信息是增加而不是覆盖  
log4j.appender.errorFile.Append=true  
#信息输出格式 
log4j.appender.errorFile.layout = org.apache.log4j.PatternLayout  
log4j.appender.errorFile.layout.ConversionPattern = [framework][%d{ABSOLUTE}-%l][%p]:%m %n

## 输出sql
#log4j.logger.com.ibatis = debug    
#log4j.logger.com.ibatis.common.jdbc.SimpleDataSource = debug    
#log4j.logger.com.ibatis.common.jdbc.ScriptRunner = debug    
#log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate = debug    
#log4j.logger.java.sql.Connection = debug    
log4j.logger.java.sql.Statement = debug    
log4j.logger.java.sql.PreparedStatement = debug    
log4j.logger.java.sql.ResultSet =debug 

###
#%m   输出代码中指定的消息（这个就是我们在代码中定义要打出的那部分）  
#%n   输出一个回车换行符（Windows平台为“\r\n”，Unix平台为“\n”）   
#%p   输出优先级（即DEBUG，INFO，WARN，ERROR，FATAL）  
#%r   输出自应用启动到输出该log信息耗费的毫秒数   
#%c   输出所属的类目，通常就是所在类的全名   
#%t   输出产生该日志事件的线程名   
#%d   输出日志时间点的日期或时间（默认格式为ISO8601，也可以指定格式，如：%d{yyy MMM dd HH:mm:ss , SSS}，或者直接%d{ABSOLUTE}）  
#%l   输出日志事件的发生位置，包括类目名以及在代码中的行数。（如：test.demo.controller.TestSpringController.getUser(TestSpringController.java:40)）    